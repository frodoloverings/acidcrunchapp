import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React, { useRef, useEffect, useState } from 'react';
import Icon from './Icon.js';
const InfoSection = ({ title, desc }) => (_jsxs("div", { className: "mb-4", children: [_jsx("h4", { className: "text-lg font-bold text-white mb-1", children: title }), _jsx("p", { className: "text-gray-300 whitespace-pre-wrap", children: desc })] }));
const HotkeyEntry = ({ keys, description }) => (_jsxs("div", { className: "flex justify-between items-center py-2 border-b border-white/5 last:border-b-0", children: [_jsx("span", { className: "text-gray-300", children: description }), _jsx("div", { className: "flex gap-1.5 flex-shrink-0 ml-4", children: keys.split(',').map(keyGroup => keyGroup.trim().split('+').map(key => (_jsx("kbd", { className: "px-2 py-1 text-xs font-semibold text-gray-200 bg-[#2a2a2a] border border-[#383838] rounded-md min-w-[24px] text-center", children: key.trim() }, key)))) })] }));
const AccordionSection = ({ title, children, isOpen, onToggle, icon }) => {
    return (_jsxs("div", { className: "mb-2", children: [_jsxs("button", { onClick: onToggle, className: "w-full text-left p-3 bg-[#2a2a2a] hover:bg-[#383838] rounded-lg transition-colors text-gray-200 flex justify-between items-center", children: [_jsxs("div", { className: "flex items-center gap-3", children: [_jsx(Icon, { name: icon, className: "w-6 h-6 text-[#d1fe17]" }), _jsx("h3", { className: "text-xl font-semibold", children: title })] }), _jsx(Icon, { name: isOpen ? 'chevron-up' : 'chevron-down', className: "w-6 h-6 transition-transform" })] }), _jsx("div", { className: "overflow-hidden transition-all duration-500 ease-in-out", style: { maxHeight: isOpen ? '2000px' : '0px' }, children: _jsx("div", { className: "pt-4 pl-4 ml-4 border-l-2 border-gray-700", children: children }) })] }));
};
const InfoModal = ({ isOpen, onClose, t }) => {
    const modalRef = useRef(null);
    const [openSection, setOpenSection] = useState('workspace');
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (modalRef.current && !modalRef.current.contains(event.target)) {
                onClose();
            }
        };
        if (isOpen) {
            document.addEventListener('mousedown', handleClickOutside);
        }
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [isOpen, onClose]);
    if (!isOpen)
        return null;
    const handleToggle = (sectionName) => {
        setOpenSection(prev => (prev === sectionName ? null : sectionName));
    };
    return (_jsx("div", { className: "fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4", children: _jsxs("div", { ref: modalRef, className: "relative flex flex-col bg-[#1c1c1c] rounded-2xl p-6 shadow-2xl border border-[#262626] w-full max-w-3xl max-h-[85vh]", children: [_jsxs("div", { className: "flex justify-between items-center mb-4 flex-shrink-0", children: [_jsx("h3", { className: "text-2xl font-bold text-white", children: t('info_modal.title') }), _jsx("button", { onClick: onClose, className: "p-2 rounded-full hover:bg-white/10 text-gray-400", children: _jsx(Icon, { name: "x", className: "w-6 h-6" }) })] }), _jsxs("div", { className: "flex-grow overflow-y-auto space-y-2 pr-4", children: [_jsx("p", { className: "text-gray-400 mb-4", children: t('info_modal.p1') }), _jsxs(AccordionSection, { title: t('info_modal.workspace_title'), isOpen: openSection === 'workspace', onToggle: () => handleToggle('workspace'), icon: "pixels", children: [_jsx("p", { className: "text-gray-300 whitespace-pre-wrap mb-4", children: t('info_modal.workspace_desc') }), _jsx(InfoSection, { title: t('info_modal.uploading_title'), desc: t('info_modal.uploading_desc') }), _jsx(InfoSection, { title: t('info_modal.interacting_title'), desc: t('info_modal.interacting_desc') }), _jsx(InfoSection, { title: t('info_modal.floating_buttons_title'), desc: t('info_modal.floating_buttons_desc') })] }), _jsxs(AccordionSection, { title: t('info_modal.editor_title'), isOpen: openSection === 'editor', onToggle: () => handleToggle('editor'), icon: "edit", children: [_jsx("p", { className: "text-gray-300 whitespace-pre-wrap mb-4", children: t('info_modal.editor_desc') }), _jsx(InfoSection, { title: t('info_modal.confirm_edits_title'), desc: t('info_modal.confirm_edits_desc') }), _jsx(InfoSection, { title: t('info_modal.layers_title'), desc: t('info_modal.layers_desc') }), _jsx(InfoSection, { title: t('info_modal.drawing_tools_title'), desc: t('info_modal.drawing_tools_desc') })] }), _jsxs(AccordionSection, { title: t('info_modal.right_toolbar_title'), isOpen: openSection === 'toolbar', onToggle: () => handleToggle('toolbar'), icon: "hand", children: [_jsx("p", { className: "text-gray-300 whitespace-pre-wrap mb-4", children: t('info_modal.right_toolbar_desc') }), _jsx(InfoSection, { title: t('info_modal.undo_redo_title'), desc: t('info_modal.undo_redo_desc') }), _jsx(InfoSection, { title: t('info_modal.selection_hand_title'), desc: t('info_modal.selection_hand_desc') }), _jsx(InfoSection, { title: t('info_modal.focus_title'), desc: t('info_modal.focus_desc') }), _jsx(InfoSection, { title: t('info_modal.clear_title'), desc: t('info_modal.clear_desc') })] }), _jsxs(AccordionSection, { title: t('info_modal.generation_bar_title'), isOpen: openSection === 'generation', onToggle: () => handleToggle('generation'), icon: "sparkles", children: [_jsx("p", { className: "text-gray-300 whitespace-pre-wrap mb-4", children: t('info_modal.generation_bar_desc') }), _jsx(InfoSection, { title: t('info_modal.prompt_area_title'), desc: t('info_modal.prompt_area_desc') }), _jsx(InfoSection, { title: t('info_modal.action_buttons_title'), desc: t('info_modal.action_buttons_desc') })] }), _jsxs(AccordionSection, { title: t('info_modal.protips_title'), isOpen: openSection === 'protips', onToggle: () => handleToggle('protips'), icon: "lightbulb", children: [_jsx(InfoSection, { title: t('info_modal.protip1_title'), desc: t('info_modal.protip1_desc') }), _jsx(InfoSection, { title: t('info_modal.protip2_title'), desc: t('info_modal.protip2_desc') }), _jsx(InfoSection, { title: t('info_modal.protip3_title'), desc: t('info_modal.protip3_desc') }), _jsx(InfoSection, { title: t('info_modal.protip4_title'), desc: t('info_modal.protip4_desc') }), _jsx(InfoSection, { title: t('info_modal.protip5_title'), desc: t('info_modal.protip5_desc') }), _jsx(InfoSection, { title: t('info_modal.protip6_title'), desc: t('info_modal.protip6_desc') }), _jsx(InfoSection, { title: t('info_modal.final_tip_title'), desc: t('info_modal.final_tip_desc') })] }), _jsxs(AccordionSection, { title: t('info_modal.hotkeys_title'), isOpen: openSection === 'hotkeys', onToggle: () => handleToggle('hotkeys'), icon: "key", children: [_jsx("p", { className: "text-gray-400 mb-4", children: t('info_modal.hotkeys_desc') }), _jsx("h4", { className: "text-lg font-bold text-white mt-4 mb-2", children: t('info_modal.hotkeys_generation_title') }), _jsx(HotkeyEntry, { keys: "Shift + Enter", description: t('info_modal.hotkey_generate') }), _jsx(HotkeyEntry, { keys: "R, \u041A", description: t('info_modal.hotkey_reasoning') }), _jsx(HotkeyEntry, { keys: "E, \u0423", description: t('info_modal.hotkey_enhance') }), _jsx(HotkeyEntry, { keys: "Shift + E, \u0423", description: t('info_modal.hotkey_edit_image') }), _jsx(HotkeyEntry, { keys: "M, \u042C", description: t('info_modal.hotkey_magic_prompt') }), _jsx("h4", { className: "text-lg font-bold text-white mt-4 mb-2", children: t('info_modal.hotkeys_tools_title') }), _jsx(HotkeyEntry, { keys: "V, \u041C", description: t('info_modal.hotkey_tool_selection') }), _jsx(HotkeyEntry, { keys: "H, \u0420", description: t('info_modal.hotkey_tool_hand') }), _jsx(HotkeyEntry, { keys: "B, \u0418", description: t('info_modal.hotkey_tool_brush') }), _jsx(HotkeyEntry, { keys: "L, \u0414", description: t('info_modal.hotkey_tool_lasso') }), _jsx(HotkeyEntry, { keys: "A, \u0424", description: t('info_modal.hotkey_tool_arrow') }), _jsx(HotkeyEntry, { keys: "I, \u0428", description: t('info_modal.hotkey_tool_text') }), _jsx("h4", { className: "text-lg font-bold text-white mt-4 mb-2", children: t('info_modal.hotkeys_canvas_title') }), _jsx(HotkeyEntry, { keys: "Ctrl/Cmd + Z", description: t('info_modal.hotkey_undo') }), _jsx(HotkeyEntry, { keys: "Ctrl/Cmd + Shift + Z, Ctrl+Y", description: t('info_modal.hotkey_redo') }), _jsx(HotkeyEntry, { keys: "Del / Backspace", description: t('info_modal.hotkey_delete') }), _jsx(HotkeyEntry, { keys: "+", description: t('info_modal.hotkey_add_image') }), _jsx(HotkeyEntry, { keys: "P, \u0417", description: t('info_modal.hotkey_presets') }), _jsx(HotkeyEntry, { keys: "T, \u0415", description: t('info_modal.hotkey_expand_prompt') }), _jsx(HotkeyEntry, { keys: "Shift + A, \u0424", description: t('info_modal.hotkey_aspect_ratio') }), _jsx(HotkeyEntry, { keys: "Shift + S, \u042B", description: t('info_modal.hotkey_download') }), _jsx(HotkeyEntry, { keys: "Spacebar (Hold)", description: t('info_modal.hotkey_temp_hand') }), _jsx(HotkeyEntry, { keys: "Esc", description: t('info_modal.hotkey_cancel_aspect') })] })] })] }) }));
};
export default InfoModal;
